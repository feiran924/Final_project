# Compute likelihoods for each N
likelihoods <- sapply(N_values, likelihood_N)
# Normalize likelihoods so the highest value is 1.0
normalized_likelihoods <- likelihoods / max(likelihoods)
# Plot the evidence
plot(N_values, normalized_likelihoods, type = "l", col = "blue",
xlab = "Total Population Size (N)", ylab = "Normalized Likelihood",
main = "Evidence about Fish Abundance (N)",
ylim = c(0, 1))  # Set y-axis limits to [0, 1]
grid()
# Add a point at the maximum likelihood estimate (MLE)
mle_N <- N_values[which.max(likelihoods)]
points(mle_N, 1, col = "red", pch = 19)
text(mle_N, 1, labels = paste("MLE =", mle_N), pos = 4, col = "red")
# Calculate the P-value for F = 12.5 with DF1 = 1 and DF2 = 10
p_value <- pf(12.5, df1 = 1, df2 = 10, lower.tail = FALSE)
p_value
sessionInfo()
cat("hello from cat\n")
message("hello from message")
print("hello from print")
warning("hello from warning")
stop("hello from stop")
c <- c(0.9, 0.8, 0.6, 0.4, 0.3, 0.2)
x <- c(10, 6, 8, 3, 0, 0)
# Define the likelihood function
likelihood <- function(lambda, c, x) {
prod(dpois(x, lambda = c * lambda))
}
# Range of lambda values
lambda_values <- seq(0, 20, by = 0.1)
# Compute likelihoods
likelihoods <- sapply(lambda_values, likelihood, c = c, x = x)
# Normalize likelihoods
normalized_likelihoods <- likelihoods / max(likelihoods)
# Plot the evidence
plot(lambda_values, normalized_likelihoods, type = "l", col = "blue",
xlab = "λ", ylab = "Normalized Likelihood",
main = "Evidence for Protein Relative Abundance (λ)",
ylim = c(0, 1))
grid()
# Define the data (ignoring x5 and x6)
c_ignored <- c(0.9, 0.8, 0.6, 0.4)
x_ignored <- c(10, 6, 8, 3)
# Compute likelihoods
likelihoods_ignored <- sapply(lambda_values, likelihood, c = c_ignored, x = x_ignored)
# Normalize likelihoods
normalized_likelihoods_ignored <- likelihoods_ignored / max(likelihoods_ignored)
# Add to the plot
lines(lambda_values, normalized_likelihoods_ignored, col = "red", lty = 2)
legend("topright", legend = c("All Data", "Ignored x5, x6"), col = c("blue", "red"), lty = 1:2)
url_for_data <- "https//bit/ly/vrc01_data"
data <- read.csv(url_for_data, header = TRUE)
url_for_data <- "https://bit/ly/vrc01_data"
data <- read.csv(url_for_data, header = TRUE)
tinytex::install_tinytex()
install.packages("tinytex")
sessionInfo()
install.packages("tinytex", dependencies = TRUE)
install.packages("tinytex", force = TRUE)
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
tinytex::tlmgr_update()
tinytex::latexmk("test.tex")
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
#### q4 ####
# Load necessary libraries
library(ggplot2)
# Define the data
exact_data <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
interval_lower <- c(3.0, 6.0, 2.0, 10.0, 8.0, 7.0, 10.0)
interval_upper <- c(4.0, 7.0, 3.0, 11.0, 9.0, 8.0, 11.0)
# Define the log-likelihood functions
log_likelihood_exact <- function(mu, data) {
n <- length(data)
-n * log(mu) - sum(data) / mu
}
log_likelihood_interval <- function(mu, lower, upper) {
sum(log(exp(-lower / mu) - exp(-upper / mu)))
}
log_likelihood_combined <- function(mu, lower, upper, censored) {
interval_part <- sum(log(exp(-lower / mu) - exp(-upper / mu)))
censored_part <- -sum(censored) / mu
interval_part + censored_part
}
# Define a range of mu values for plotting
mu_values <- seq(0.1, 20, by = 0.1)
# Compute log-likelihoods for each scenario
log_lik_exact <- sapply(mu_values, log_likelihood_exact, data = exact_data)
log_lik_interval <- sapply(mu_values, log_likelihood_interval, lower = interval_lower, upper = interval_upper)
log_lik_combined <- sapply(mu_values, log_likelihood_combined, lower = interval_lower[-c(4, 7)], upper = interval_upper[-c(4, 7)], censored = c(10, 10))
# Combine results into a data frame for plotting
results <- data.frame(
mu = mu_values,
Exact = log_lik_exact,
Interval = log_lik_interval,
Combined = log_lik_combined
)
# Plot the log-likelihoods
ggplot(results, aes(x = mu)) +
geom_line(aes(y = Exact, color = "Exact Data"), size = 1) +
geom_line(aes(y = Interval, color = "Interval-Censored"), size = 1) +
geom_line(aes(y = Combined, color = "Combined Censoring"), size = 1) +
labs(
title = "Log-Likelihood for Different Censoring Scenarios",
x = "Mean Survival Time (μ)",
y = "Log-Likelihood",
color = "Scenario"
) +
theme_minimal()
# Data
times <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
# Likelihood function for exponential distribution
L_mu <- function(mu) {
n <- length(times)
exp(-sum(times) / mu) * (1 / mu)^n
}
# Range of mu
mu_vals <- seq(1, 15, length.out = 1000)
# Calculate likelihood for each mu
L_vals <- sapply(mu_vals, L_mu)
# Plot
plot(mu_vals, L_vals, type = "l", col = "blue", lwd = 2,
xlab = expression(mu), ylab = "Likelihood",
main = "Evidence about \u03bc")
# Load necessary libraries
library(ggplot2)
# Define the data
exact_data <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
interval_lower <- c(3.0, 6.0, 2.0, 10.0, 8.0, 7.0, 10.0)
interval_upper <- c(4.0, 7.0, 3.0, 11.0, 9.0, 8.0, 11.0)
# Define the likelihood functions
likelihood_exact <- function(mu, data) {
n <- length(data)
(1 / mu)^n * exp(-sum(data) / mu)
}
likelihood_interval <- function(mu, lower, upper) {
prod(exp(-lower / mu) - exp(-upper / mu))
}
likelihood_combined <- function(mu, lower, upper, censored) {
interval_part <- prod(exp(-lower / mu) - exp(-upper / mu))
censored_part <- exp(-sum(censored) / mu)
interval_part * censored_part
}
# Define a range of mu values for plotting
mu_values <- seq(0.1, 20, by = 0.1)
# Compute likelihoods for each scenario
lik_exact <- sapply(mu_values, likelihood_exact, data = exact_data)
lik_interval <- sapply(mu_values, likelihood_interval, lower = interval_lower, upper = interval_upper)
lik_combined <- sapply(mu_values, likelihood_combined, lower = interval_lower[-c(4, 7)], upper = interval_upper[-c(4, 7)], censored = c(10, 10))
# Combine results into a data frame for plotting
results <- data.frame(
mu = mu_values,
Exact = lik_exact,
Interval = lik_interval,
Combined = lik_combined
)
# Plot the likelihoods
ggplot(results, aes(x = mu)) +
geom_line(aes(y = Exact, color = "Exact Data"), size = 1) +
geom_line(aes(y = Interval, color = "Interval-Censored"), size = 1) +
geom_line(aes(y = Combined, color = "Combined Censoring"), size = 1) +
labs(
title = "Likelihood for Different Censoring Scenarios",
x = "Mean Survival Time (μ)",
y = "Likelihood",
color = "Scenario"
) +
theme_minimal()
# Data
times <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
# Likelihood function for exponential distribution
L_mu <- function(mu) {
n <- length(times)
exp(-sum(times) / mu) * (1 / mu)^n
}
# Range of mu
mu_vals <- seq(0, 20, length.out = 1000)
# Calculate likelihood for each mu
L_vals <- sapply(mu_vals, L_mu)
# Plot
plot(mu_vals, L_vals, type = "l", col = "blue", lwd = 2,
xlab = expression(mu), ylab = "Likelihood",
main = "Evidence about \u03bc")
# Define the exact data
exact_data <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
# Define the likelihood function for exact data
likelihood_exact <- function(mu, data) {
n <- length(data)
(1 / mu)^n * exp(-sum(data) / mu)
}
# Define a range of mu values for plotting
mu_values <- seq(0.1, 20, by = 0.1)
# Compute likelihood for exact data
lik_exact <- sapply(mu_values, likelihood_exact, data = exact_data)
# Combine results into a data frame for plotting
results_exact <- data.frame(
mu = mu_values,
Likelihood = lik_exact
)
# Plot the likelihood for exact data
ggplot(results_exact, aes(x = mu, y = Likelihood)) +
geom_line(color = "blue", size = 1) +
labs(
title = "Likelihood for Exact Data",
x = "Mean Survival Time (μ)",
y = "Likelihood"
) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Define the exact data
exact_data <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
# Define the likelihood function for exact data
likelihood_exact <- function(mu, data) {
n <- length(data)
(1 / mu)^n * exp(-sum(data) / mu)
}
# Define a range of mu values for plotting
mu_values <- seq(0.1, 20, by = 0.1)
# Compute likelihood for exact data
lik_exact <- sapply(mu_values, likelihood_exact, data = exact_data)
# Scale the likelihood values so the maximum value is 1.0
lik_exact_scaled <- lik_exact / max(lik_exact)
# Combine results into a data frame for plotting
results_exact <- data.frame(
mu = mu_values,
Likelihood = lik_exact_scaled
)
# Plot the scaled likelihood for exact data
ggplot(results_exact, aes(x = mu, y = Likelihood)) +
geom_line(color = "blue", size = 1) +
labs(
title = "Scaled Likelihood for Exact Data",
x = "Mean Survival Time (μ)",
y = "Scaled Likelihood"
) +
theme_minimal()
# Define the interval-censored data
interval_lower <- c(3.0, 6.0, 2.0, 10.0, 8.0, 7.0, 10.0)
interval_upper <- c(4.0, 7.0, 3.0, 11.0, 9.0, 8.0, 11.0)
# Define the likelihood function for interval-censored data
likelihood_interval <- function(mu, lower, upper) {
prod(exp(-lower / mu) - exp(-upper / mu))
}
# Define a range of mu values for plotting
mu_values <- seq(0.1, 20, by = 0.1)
# Compute likelihood for interval-censored data
lik_interval <- sapply(mu_values, likelihood_interval, lower = interval_lower, upper = interval_upper)
# Scale the likelihood values so the maximum value is 1.0
lik_interval_scaled <- lik_interval / max(lik_interval)
# Combine results into a data frame for plotting
results_interval <- data.frame(
mu = mu_values,
Likelihood = lik_interval_scaled
)
# Plot the scaled likelihood for interval-censored data
ggplot(results_interval, aes(x = mu, y = Likelihood)) +
geom_line(color = "red", size = 1) +
labs(
title = "Scaled Likelihood for Interval-Censored Data",
x = "Mean Survival Time (μ)",
y = "Scaled Likelihood"
) +
theme_minimal()
# Interval-censored data
intervals <- list(c(3, 4), c(6, 7), c(2, 3), c(10, 11), c(8, 9), c(7, 8), c(10, 11))
# Likelihood function for interval-censoring
L_mu_interval <- function(mu) {
prod(sapply(intervals, function(interval) {
pexp(interval[2], rate = 1 / mu) - pexp(interval[1], rate = 1 / mu)
}))
}
# Calculate likelihood for each mu
L_vals_interval <- sapply(mu_vals, L_mu_interval)
# Plot
plot(mu_vals, L_vals_interval, type = "l", col = "darkgreen", lwd = 2,
xlab = expression(mu), ylab = "Likelihood",
main = "Evidence about \u03bc (Interval-Censoring)")
# Define the exact data
exact_data <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
# Define the likelihood function for exact data
likelihood_exact <- function(mu, data) {
n <- length(data)
(1 / mu)^n * exp(-sum(data) / mu)
}
# Compute likelihood for exact data
lik_exact <- sapply(mu_values, likelihood_exact, data = exact_data)
lik_exact_scaled <- lik_exact / max(lik_exact)  # Scale to 1.0
# Define the interval-censored data
interval_lower <- c(3.0, 6.0, 2.0, 10.0, 8.0, 7.0, 10.0)
interval_upper <- c(4.0, 7.0, 3.0, 11.0, 9.0, 8.0, 11.0)
# Define the likelihood function for interval-censored data
likelihood_interval <- function(mu, lower, upper) {
prod(exp(-lower / mu) - exp(-upper / mu))
}
# Compute likelihood for interval-censored data
lik_interval <- sapply(mu_values, likelihood_interval, lower = interval_lower, upper = interval_upper)
lik_interval_scaled <- lik_interval / max(lik_interval)  # Scale to 1.0
# Combine results into a single data frame
results_combined <- data.frame(
mu = rep(mu_values, 2),
Likelihood = c(lik_exact_scaled, lik_interval_scaled),
Type = rep(c("Exact Data", "Interval-Censored Data"), each = length(mu_values))
)
# Plot both likelihoods on the same graph
ggplot(results_combined, aes(x = mu, y = Likelihood, color = Type, linetype = Type)) +
geom_line(size = 1) +
labs(
title = "Comparison of Likelihoods: Exact vs Interval-Censored Data",
x = "Mean Survival Time (μ)",
y = "Scaled Likelihood"
) +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(legend.title = element_blank())
# Define the data
exact_data <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
interval_lower <- c(3.0, 6.0, 2.0, 10.0, 8.0, 7.0, 10.0)
interval_upper <- c(4.0, 7.0, 3.0, 11.0, 9.0, 8.0, 11.0)
# Define the likelihood functions
likelihood_exact <- function(mu, data) {
n <- length(data)
(1 / mu)^n * exp(-sum(data) / mu)
}
likelihood_interval <- function(mu, lower, upper) {
prod(exp(-lower / mu) - exp(-upper / mu))
}
likelihood_combined <- function(mu, lower, upper, censored) {
interval_part <- prod(exp(-lower / mu) - exp(-upper / mu))
censored_part <- exp(-sum(censored) / mu)
interval_part * censored_part
}
# Define a range of mu values for plotting
mu_values <- seq(0.1, 20, by = 0.1)
# Compute likelihoods for each scenario
lik_exact <- sapply(mu_values, likelihood_exact, data = exact_data)
lik_interval <- sapply(mu_values, likelihood_interval, lower = interval_lower, upper = interval_upper)
lik_combined <- sapply(mu_values, likelihood_combined, lower = interval_lower[-c(4, 7)], upper = interval_upper[-c(4, 7)], censored = c(10, 10))
# Scale each likelihood to 1.0
lik_exact_scaled <- lik_exact / max(lik_exact)
lik_interval_scaled <- lik_interval / max(lik_interval)
lik_combined_scaled <- lik_combined / max(lik_combined)
# Combine results into a data frame for plotting
results <- data.frame(
mu = mu_values,
Exact = lik_exact_scaled,
Interval = lik_interval_scaled,
Combined = lik_combined_scaled
)
# Plot the scaled likelihoods
ggplot(results, aes(x = mu)) +
geom_line(aes(y = Exact, color = "Exact Data"), size = 1) +
geom_line(aes(y = Interval, color = "Interval-Censored"), size = 1) +
geom_line(aes(y = Combined, color = "Combined Censoring"), size = 1) +
labs(
title = "Scaled Likelihood for Different Censoring Scenarios",
x = "Mean Survival Time (μ)",
y = "Scaled Likelihood",
color = "Scenario"
) +
theme_minimal()
# Define the data
exact_data <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
interval_lower <- c(3.0, 6.0, 2.0, 10.0, 8.0, 7.0, 10.0)
interval_upper <- c(4.0, 7.0, 3.0, 11.0, 9.0, 8.0, 11.0)
# Define the likelihood functions
likelihood_exact <- function(mu, data) {
n <- length(data)
(1 / mu)^n * exp(-sum(data) / mu)
}
likelihood_interval <- function(mu, lower, upper) {
prod(exp(-lower / mu) - exp(-upper / mu))
}
likelihood_combined <- function(mu, lower, upper, censored) {
interval_part <- prod(exp(-lower / mu) - exp(-upper / mu))
censored_part <- exp(-sum(censored) / mu)
interval_part * censored_part
}
# Define a range of mu values for plotting
mu_values <- seq(0.1, 20, by = 0.1)
# Compute likelihoods for each scenario
lik_exact <- sapply(mu_values, likelihood_exact, data = exact_data)
lik_interval <- sapply(mu_values, likelihood_interval, lower = interval_lower, upper = interval_upper)
lik_combined <- sapply(mu_values, likelihood_combined, lower = interval_lower[-c(4, 7)], upper = interval_upper[-c(4, 7)], censored = c(10, 10))
# Scale each likelihood to 1.0
lik_exact_scaled <- lik_exact / max(lik_exact)
lik_interval_scaled <- lik_interval / max(lik_interval)
lik_combined_scaled <- lik_combined / max(lik_combined)
# Combine results into a data frame for plotting
results <- data.frame(
mu = mu_values,
Exact = lik_exact_scaled,
Interval = lik_interval_scaled,
Combined = lik_combined_scaled
)
# Melt the data frame for ggplot compatibility
library(reshape2)
exact_data <- c(3.5, 6.5, 2.5, 10.5, 8.5, 7.5, 10.5)
# Define interval-censored data (for parts b and c)
interval_lower <- c(3.0, 6.0, 2.0, 10.0, 8.0, 7.0, 10.0)
interval_upper <- c(4.0, 7.0, 3.0, 11.0, 9.0, 8.0, 11.0)
# Define functions for likelihood calculations
likelihood_exact <- function(mu) {
(1/mu)^7 * exp(-sum(exact_data)/mu)
}
likelihood_interval <- function(mu) {
prod(exp(-interval_lower/mu) - exp(-interval_upper/mu))
}
likelihood_combined <- function(mu) {
# Handle interval-censored observations (first 5)
interval_part <- prod(exp(-interval_lower[1:5]/mu) - exp(-interval_upper[1:5]/mu))
# Handle right-censored observations (last 2)
right_censored_part <- exp(-20/mu)  # 10 + 10 years
interval_part * right_censored_part
}
# Generate range of μ values
mu_values <- seq(1, 20, by = 0.1)
# Calculate likelihoods
lik_exact <- sapply(mu_values, likelihood_exact)
lik_interval <- sapply(mu_values, likelihood_interval)
lik_combined <- sapply(mu_values, likelihood_combined)
# Normalize likelihoods to [0,1]
lik_exact_norm <- lik_exact/max(lik_exact)
lik_interval_norm <- lik_interval/max(lik_interval)
lik_combined_norm <- lik_combined/max(lik_combined)
# Create data frame for plotting
plot_data <- data.frame(
mu = rep(mu_values, 3),
Likelihood = c(lik_exact_norm, lik_interval_norm, lik_combined_norm),
Scenario = factor(rep(c("Exact Data", "Interval-Censored", "Combined Censoring"),
each = length(mu_values)))
)
# Create plot with distinct styles
ggplot(plot_data, aes(x = mu, y = Likelihood, color = Scenario, linetype = Scenario)) +
geom_line(size = 1.2) +
scale_color_manual(values = c("Exact Data" = "blue",
"Interval-Censored" = "red",
"Combined Censoring" = "darkgreen")) +
scale_linetype_manual(values = c("Exact Data" = "solid",
"Interval-Censored" = "dashed",
"Combined Censoring" = "dotted")) +
labs(title = "Comparison of Evidence About μ",
x = "Mean Survival Time (μ)",
y = "Normalized Likelihood",
color = "Scenario",
linetype = "Scenario") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12))
data <- c(1.2, 6.6, 3.4, 7.1, 11.8)
data_modified <- c(-1.2, 6.6, 3.4, 7.1, 11.8)  # First observation changed to -1.2
# Parameters for normal distribution (H0)
mu_norm <- 5
sd_norm <- 3  # sqrt(variance = 9)
# Parameters for gamma distribution (H1)
var <- 9
shape_gamma <- mu_norm^2 / var  # shape = 25/9 ≈ 2.7778
rate_gamma <- mu_norm / var     # rate = 5/9 ≈ 0.5556
# Function to compute scaled likelihoods
compute_likelihoods <- function(data) {
# Likelihood under normal distribution
normal_lik <- prod(dnorm(data, mean = mu_norm, sd = sd_norm))
# Likelihood under gamma distribution (returns 0 if any x ≤ 0)
gamma_lik <- ifelse(any(data <= 0), 0, prod(dgamma(data, shape = shape_gamma, rate = rate_gamma)))
# Scale likelihoods to [0, 1]
max_lik <- max(normal_lik, gamma_lik)
scaled_normal <- normal_lik / max_lik
scaled_gamma <- gamma_lik / max_lik
return(list(
normal = scaled_normal,
gamma = scaled_gamma
))
}
# Results for original data
results_original <- compute_likelihoods(data)
cat("Original Data (1.2, 6.6, 3.4, 7.1, 11.8):\n")
cat(sprintf("Normal Likelihood (scaled): %.4f\n", results_original$normal))
cat(sprintf("Gamma Likelihood (scaled): %.4f\n\n", results_original$gamma))
# Results for modified data
results_modified <- compute_likelihoods(data_modified)
cat("Modified Data (-1.2, 6.6, 3.4, 7.1, 11.8):\n")
cat(sprintf("Normal Likelihood (scaled): %.4f\n", results_modified$normal))
cat(sprintf("Gamma Likelihood (scaled): %.4f\n", results_modified$gamma))
data <- c(1.2, 6.6, 3.4, 7.1, 11.8)
data_modified <- c(-1.2, 6.6, 3.4, 7.1, 11.8)
# Normal parameters
mu <- 5
sigma <- 3  # sqrt(9)
# Gamma parameters (shape = 25/9, rate = 5/9)
shape <- mu^2 / 9
rate <- mu / 9
# Compute scaled likelihoods
compute_likelihoods <- function(x) {
normal_lik <- prod(dnorm(x, mu, sigma))
gamma_lik <- if (any(x <= 0)) 0 else prod(dgamma(x, shape, rate))
scaled <- c(normal_lik, gamma_lik) / max(normal_lik, gamma_lik)
return(scaled)
}
# Results for original data
scaled_orig <- compute_likelihoods(data)
cat("Original Data:\n")
cat(sprintf("Normal (scaled): %.4f\nGamma (scaled): %.4f\n\n", scaled_orig[1], scaled_orig[2]))
# Results for modified data
scaled_mod <- compute_likelihoods(data_modified)
cat("Modified Data (X₁ = -1.2):\n")
cat(sprintf("Normal (scaled): %.4f\nGamma (scaled): %.4f\n", scaled_mod[1], scaled_mod[2]))
setwd("~/Desktop/data550")
setwd("~/Desktop/data550/final project")
